// resources/js/index.js
function initializeDocument(args) {
  return {
    selectedLabel: {
      name: null,
      color: null
    },
    labelList: /* @__PURE__ */ new Map(),
    targetText: args.text,
    id: args.id,
    annotations: args.annotations,
    init: function() {
      this.annotations.forEach((annotation) => {
        this.labelList.set(this.generateUUID(), {
          text: annotation.text,
          start: annotation.start,
          end: annotation.end,
          label: annotation.label,
          color: annotation.color
        });
      });
      document.addEventListener("contextmenu", this.removeLabel.bind(this));
    },
    setSelectedLabel: function(label) {
      this.selectedLabel = label;
    },
    markText: function(event) {
      var element = document.getElementById(this.id);
      var selection = element.ownerDocument.getSelection();
      if (!this.selectedLabel || !this.selectedLabel.name) {
        return;
      }
      if (selection.toString().length < 1) {
        return;
      }
      var selectedText = selection.toString();
      if (selectedText !== "") {
        var range = selection.getRangeAt(0);
        while (/^\s/.test(range.startContainer.textContent[range.startOffset])) {
          range.setStart(range.startContainer, range.startOffset + 1);
        }
        while (/\s$/.test(range.endContainer.textContent[range.endOffset - 1])) {
          range.setEnd(range.endContainer, range.endOffset - 1);
        }
        var commonAncestor = range.commonAncestorContainer;
        var offset = this.calculateOffset(selection.anchorNode.parentNode, selection.anchorNode);
        var isWithinLabeledSpan = commonAncestor.nodeType === Node.ELEMENT_NODE && commonAncestor.classList.contains("annotations-label");
        if (!isWithinLabeledSpan) {
          console.log(this.selectedLabel);
          var start = offset + range.startOffset;
          var end = offset + range.endOffset;
          var key = this.generateUUID();
          this.labelList.set(key, {
            text: selectedText,
            start,
            end,
            label: this.selectedLabel.name,
            color: this.selectedLabel.color
          });
          this.refreshTextField();
        }
      }
    },
    calculateOffset: function(parentNode, selectionNode) {
      var totalLength = 0;
      for (const child of parentNode.childNodes) {
        console.log("offset: " + totalLength);
        console.log("nodetype: " + child.nodeType);
        if (child === selectionNode) {
          break;
        }
        if (child.nodeType === Node.ELEMENT_NODE) {
          console.log(child.textContent.length);
          for (const subChild of child.childNodes) {
            if (subChild.nodeType === Node.TEXT_NODE) {
              totalLength += subChild.textContent.length;
            }
          }
        } else if (child.nodeType === Node.TEXT_NODE) {
          console.log(child.textContent.length);
          totalLength += child.textContent.length;
        }
      }
      return totalLength;
    },
    refreshTextField: function() {
      let resultHTML = "";
      let currentIndex = 0;
      const sortedLabelList = [...this.labelList.entries()].sort((a, b) => a[1].start - b[1].start);
      sortedLabelList.forEach(([key, label]) => {
        if (currentIndex < label.start) {
          resultHTML += this.targetText.substring(currentIndex, label.start);
        }
        resultHTML += this.createSpan(label, key);
        currentIndex = label.end;
      });
      if (currentIndex < this.targetText.length) {
        resultHTML += this.targetText.substring(currentIndex);
      }
      var element = document.getElementById(this.id);
      element.innerHTML = resultHTML;
    },
    createSpan: function(label, key) {
      var newNode = document.createElement("span");
      newNode.classList.add(key);
      newNode.classList.add("dynamic-span");
      var selectedText = this.targetText.substring(label.start, label.end);
      newNode.textContent = selectedText;
      newNode.classList.add("annotations-label");
      newNode.classList.add("tooltip");
      newNode.style.borderBottomColor = label.color;
      newNode.style.color = label.color;
      var tooltipText = document.createElement("span");
      tooltipText.textContent = label.label;
      tooltipText.classList.add("tooltiptext");
      newNode.appendChild(tooltipText);
      newNode.addEventListener("contextmenu", (event) => {
        event.preventDefault();
        console.log(key);
        this.labelList.delete(key);
        this.refreshTextField();
      });
      return newNode.outerHTML;
    },
    removeLabel: function(event) {
      if (event.target.classList.contains("dynamic-span")) {
        event.preventDefault();
        const key = Array.from(event.target.classList).find((cls) => this.labelList.has(cls));
        if (key) {
          console.log(key);
          this.labelList.delete(key);
          this.refreshTextField();
        }
      }
    },
    generateUUID: function() {
      return "xxx".replace(/[xy]/g, function(c) {
        var r = Math.random() * 16 | 0;
        var v = c === "x" ? r : r & 3 | 8;
        return v.toString(16);
      });
    }
  };
}
export {
  initializeDocument as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vanMvaW5kZXguanMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCB7IGVsZW1lbnRzIH0gZnJvbSBcImNoYXJ0LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGluaXRpYWxpemVEb2N1bWVudChhcmdzKSB7XG5cblxuICAgIHJldHVybiB7XG5cbiAgICAgICAgc2VsZWN0ZWRMYWJlbDoge1xuICAgICAgICAgICAgbmFtZTogbnVsbCxcbiAgICAgICAgICAgIGNvbG9yOiBudWxsLFxuICAgICAgICB9LFxuICAgICAgICBsYWJlbExpc3Q6IG5ldyBNYXAoKSxcbiAgICAgICAgdGFyZ2V0VGV4dDogYXJncy50ZXh0LFxuICAgICAgICBpZDogYXJncy5pZCxcbiAgICAgICAgYW5ub3RhdGlvbnM6IGFyZ3MuYW5ub3RhdGlvbnMsXG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgdGhpcy5hbm5vdGF0aW9ucy5mb3JFYWNoKGFubm90YXRpb24gPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMubGFiZWxMaXN0LnNldCh0aGlzLmdlbmVyYXRlVVVJRCgpLCB7XG4gICAgICAgICAgICAgICAgICAgIHRleHQ6IGFubm90YXRpb24udGV4dCxcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IGFubm90YXRpb24uc3RhcnQsXG4gICAgICAgICAgICAgICAgICAgIGVuZDogYW5ub3RhdGlvbi5lbmQsXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiBhbm5vdGF0aW9uLmxhYmVsLFxuICAgICAgICAgICAgICAgICAgICBjb2xvcjogYW5ub3RhdGlvbi5jb2xvcixcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNvbnRleHRtZW51XCIsIHRoaXMucmVtb3ZlTGFiZWwuYmluZCh0aGlzKSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc2V0U2VsZWN0ZWRMYWJlbDogZnVuY3Rpb24gKGxhYmVsKSB7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkTGFiZWwgPSBsYWJlbDtcbiAgICAgICAgfSxcblxuICAgICAgICBtYXJrVGV4dDogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMuaWQpO1xuICAgICAgICAgICAgdmFyIHNlbGVjdGlvbiA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5nZXRTZWxlY3Rpb24oKTtcblxuICAgICAgICAgICAgaWYgKCF0aGlzLnNlbGVjdGVkTGFiZWwgfHwgIXRoaXMuc2VsZWN0ZWRMYWJlbC5uYW1lKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoc2VsZWN0aW9uLnRvU3RyaW5nKCkubGVuZ3RoIDwgMSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBzZWxlY3RlZFRleHQgPSBzZWxlY3Rpb24udG9TdHJpbmcoKTtcbiAgICAgICAgICAgIGlmIChzZWxlY3RlZFRleHQgIT09ICcnKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJhbmdlID0gc2VsZWN0aW9uLmdldFJhbmdlQXQoMCk7XG4gICAgICAgICAgICAgICAgd2hpbGUgKC9eXFxzLy50ZXN0KHJhbmdlLnN0YXJ0Q29udGFpbmVyLnRleHRDb250ZW50W3JhbmdlLnN0YXJ0T2Zmc2V0XSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2Uuc2V0U3RhcnQocmFuZ2Uuc3RhcnRDb250YWluZXIsIHJhbmdlLnN0YXJ0T2Zmc2V0ICsgMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHdoaWxlICgvXFxzJC8udGVzdChyYW5nZS5lbmRDb250YWluZXIudGV4dENvbnRlbnRbcmFuZ2UuZW5kT2Zmc2V0IC0gMV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHJhbmdlLnNldEVuZChyYW5nZS5lbmRDb250YWluZXIsIHJhbmdlLmVuZE9mZnNldCAtIDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgY29tbW9uQW5jZXN0b3IgPSByYW5nZS5jb21tb25BbmNlc3RvckNvbnRhaW5lcjtcbiAgICAgICAgICAgICAgICB2YXIgb2Zmc2V0ID0gdGhpcy5jYWxjdWxhdGVPZmZzZXQoc2VsZWN0aW9uLmFuY2hvck5vZGUucGFyZW50Tm9kZSwgc2VsZWN0aW9uLmFuY2hvck5vZGUpO1xuXG5cbiAgICAgICAgICAgICAgICB2YXIgaXNXaXRoaW5MYWJlbGVkU3BhbiA9XG4gICAgICAgICAgICAgICAgICAgIGNvbW1vbkFuY2VzdG9yLm5vZGVUeXBlID09PSBOb2RlLkVMRU1FTlRfTk9ERSAmJlxuICAgICAgICAgICAgICAgICAgICBjb21tb25BbmNlc3Rvci5jbGFzc0xpc3QuY29udGFpbnMoJ2Fubm90YXRpb25zLWxhYmVsJyk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIWlzV2l0aGluTGFiZWxlZFNwYW4pIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2codGhpcy5zZWxlY3RlZExhYmVsKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXJ0ID0gb2Zmc2V0ICsgcmFuZ2Uuc3RhcnRPZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgIHZhciBlbmQgPSBvZmZzZXQgKyByYW5nZS5lbmRPZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgIHZhciBrZXkgPSB0aGlzLmdlbmVyYXRlVVVJRCgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxhYmVsTGlzdC5zZXQoa2V5LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBzZWxlY3RlZFRleHQsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydDogc3RhcnQsXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmQ6IGVuZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiB0aGlzLnNlbGVjdGVkTGFiZWwubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiB0aGlzLnNlbGVjdGVkTGFiZWwuY29sb3IsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlZnJlc2hUZXh0RmllbGQoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2FsY3VsYXRlT2Zmc2V0OiBmdW5jdGlvbiAocGFyZW50Tm9kZSwgc2VsZWN0aW9uTm9kZSkge1xuICAgICAgICAgICAgdmFyIHRvdGFsTGVuZ3RoID0gMDtcbiAgICAgICAgICAgIGZvciAoY29uc3QgY2hpbGQgb2YgcGFyZW50Tm9kZS5jaGlsZE5vZGVzKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJvZmZzZXQ6IFwiICsgdG90YWxMZW5ndGgpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwibm9kZXR5cGU6IFwiICsgY2hpbGQubm9kZVR5cGUpO1xuICAgICAgICAgICAgICAgIGlmIChjaGlsZCA9PT0gc2VsZWN0aW9uTm9kZSkge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoY2hpbGQubm9kZVR5cGUgPT09IE5vZGUuRUxFTUVOVF9OT0RFKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGNoaWxkLnRleHRDb250ZW50Lmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgc3ViQ2hpbGQgb2YgY2hpbGQuY2hpbGROb2Rlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN1YkNoaWxkLm5vZGVUeXBlID09PSBOb2RlLlRFWFRfTk9ERSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsTGVuZ3RoICs9IHN1YkNoaWxkLnRleHRDb250ZW50Lmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjaGlsZC5ub2RlVHlwZSA9PT0gTm9kZS5URVhUX05PREUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coY2hpbGQudGV4dENvbnRlbnQubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgdG90YWxMZW5ndGggKz0gY2hpbGQudGV4dENvbnRlbnQubGVuZ3RoO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0b3RhbExlbmd0aDtcblxuICAgICAgICB9LFxuXG4gICAgICAgIHJlZnJlc2hUZXh0RmllbGQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGxldCByZXN1bHRIVE1MID0gJyc7XG4gICAgICAgICAgICBsZXQgY3VycmVudEluZGV4ID0gMDtcbiAgICAgICAgICAgIC8vIENvbnZlcnQgdGhlIE1hcCB0byBhbiBhcnJheSBvZiBlbnRyaWVzLCB0aGVuIHNvcnQgaXQgYmFzZWQgb24gdGhlICdzdGFydCcgcHJvcGVydHlcbiAgICAgICAgICAgIGNvbnN0IHNvcnRlZExhYmVsTGlzdCA9IFsuLi50aGlzLmxhYmVsTGlzdC5lbnRyaWVzKCldLnNvcnQoKGEsIGIpID0+IGFbMV0uc3RhcnQgLSBiWzFdLnN0YXJ0KTtcbiAgICAgICAgICAgIHNvcnRlZExhYmVsTGlzdC5mb3JFYWNoKChba2V5LCBsYWJlbF0pID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudEluZGV4IDwgbGFiZWwuc3RhcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0SFRNTCArPSB0aGlzLnRhcmdldFRleHQuc3Vic3RyaW5nKGN1cnJlbnRJbmRleCwgbGFiZWwuc3RhcnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBBZGQgdGhlIGFubm90YXRlZCB0ZXh0XG4gICAgICAgICAgICAgICAgcmVzdWx0SFRNTCArPSB0aGlzLmNyZWF0ZVNwYW4obGFiZWwsIGtleSk7XG4gICAgICAgICAgICAgICAgLy8gTW92ZSBjdXJyZW50SW5kZXggcGFzdCB0aGlzIGFubm90YXRpb25cbiAgICAgICAgICAgICAgICBjdXJyZW50SW5kZXggPSBsYWJlbC5lbmQ7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChjdXJyZW50SW5kZXggPCB0aGlzLnRhcmdldFRleHQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0SFRNTCArPSB0aGlzLnRhcmdldFRleHQuc3Vic3RyaW5nKGN1cnJlbnRJbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMuaWQpO1xuICAgICAgICAgICAgZWxlbWVudC5pbm5lckhUTUwgPSByZXN1bHRIVE1MO1xuICAgICAgICB9LFxuXG4gICAgICAgIGNyZWF0ZVNwYW46IGZ1bmN0aW9uIChsYWJlbCwga2V5KSB7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhsYWJlbCk7XG4gICAgICAgICAgICB2YXIgbmV3Tm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICAgICAgICAgIG5ld05vZGUuY2xhc3NMaXN0LmFkZChrZXkpO1xuICAgICAgICAgICAgbmV3Tm9kZS5jbGFzc0xpc3QuYWRkKCdkeW5hbWljLXNwYW4nKTtcbiAgICAgICAgICAgIHZhciBzZWxlY3RlZFRleHQgPSB0aGlzLnRhcmdldFRleHQuc3Vic3RyaW5nKGxhYmVsLnN0YXJ0LCBsYWJlbC5lbmQpO1xuICAgICAgICAgICAgbmV3Tm9kZS50ZXh0Q29udGVudCA9IHNlbGVjdGVkVGV4dDtcbiAgICAgICAgICAgIG5ld05vZGUuY2xhc3NMaXN0LmFkZCgnYW5ub3RhdGlvbnMtbGFiZWwnKTtcbiAgICAgICAgICAgIG5ld05vZGUuY2xhc3NMaXN0LmFkZCgndG9vbHRpcCcpO1xuICAgICAgICAgICAgbmV3Tm9kZS5zdHlsZS5ib3JkZXJCb3R0b21Db2xvciA9IGxhYmVsLmNvbG9yO1xuICAgICAgICAgICAgbmV3Tm9kZS5zdHlsZS5jb2xvciA9IGxhYmVsLmNvbG9yO1xuICAgICAgICAgICAgLy8gdmFyIHV1aWQgPSB0aGlzLmdlbmVyYXRlVVVJRCgpO1xuICAgICAgICAgICAgLy8gbmV3Tm9kZS5kYXRhc2V0LnV1aWQgPSB1dWlkO1xuICAgICAgICAgICAgdmFyIHRvb2x0aXBUZXh0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgICAgICAgICAgdG9vbHRpcFRleHQudGV4dENvbnRlbnQgPSBsYWJlbC5sYWJlbDtcbiAgICAgICAgICAgIHRvb2x0aXBUZXh0LmNsYXNzTGlzdC5hZGQoJ3Rvb2x0aXB0ZXh0Jyk7XG4gICAgICAgICAgICBuZXdOb2RlLmFwcGVuZENoaWxkKHRvb2x0aXBUZXh0KTtcbiAgICAgICAgICAgIC8vIHRoaXMucmVtb3ZlTGFiZWwoa2V5KTtcbiAgICAgICAgICAgIG5ld05vZGUuYWRkRXZlbnRMaXN0ZW5lcihcImNvbnRleHRtZW51XCIsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coa2V5KTtcbiAgICAgICAgICAgICAgICB0aGlzLmxhYmVsTGlzdC5kZWxldGUoa2V5KTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlZnJlc2hUZXh0RmllbGQoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIG5ld05vZGUub3V0ZXJIVE1MO1xuICAgICAgICB9LFxuICAgICAgICByZW1vdmVMYWJlbDogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnZHluYW1pYy1zcGFuJykpIHtcbiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IEFycmF5LmZyb20oZXZlbnQudGFyZ2V0LmNsYXNzTGlzdCkuZmluZChjbHMgPT4gdGhpcy5sYWJlbExpc3QuaGFzKGNscykpO1xuICAgICAgICAgICAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coa2V5KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sYWJlbExpc3QuZGVsZXRlKGtleSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVmcmVzaFRleHRGaWVsZCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuXG4gICAgICAgIGdlbmVyYXRlVVVJRDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuICd4eHgnLnJlcGxhY2UoL1t4eV0vZywgZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICAgICAgICB2YXIgciA9IChNYXRoLnJhbmRvbSgpICogMTYpIHwgMDtcbiAgICAgICAgICAgICAgICB2YXIgdiA9IGMgPT09ICd4JyA/IHIgOiAociAmIDB4MykgfCAweDg7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYudG9TdHJpbmcoMTYpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgfTtcbn1cblxuXG5cblxuIl0sCiAgIm1hcHBpbmdzIjogIjtBQUVlLFNBQVIsbUJBQW9DLE1BQU07QUFHN0MsU0FBTztBQUFBLElBRUgsZUFBZTtBQUFBLE1BQ1gsTUFBTTtBQUFBLE1BQ04sT0FBTztBQUFBLElBQ1g7QUFBQSxJQUNBLFdBQVcsb0JBQUksSUFBSTtBQUFBLElBQ25CLFlBQVksS0FBSztBQUFBLElBQ2pCLElBQUksS0FBSztBQUFBLElBQ1QsYUFBYSxLQUFLO0FBQUEsSUFDbEIsTUFBTSxXQUFZO0FBRWQsV0FBSyxZ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
